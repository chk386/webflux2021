version: '3.9'

services:
  db:
    container_name: mysql
    hostname: mysql
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=webflux
      - MYSQL_USER=webflux
      - MYSQL_PASSWORD=webflux
      - MYSQL_DATABASE=webflux
    volumes:
      - ./mysql:/var/lib/mysql

  # 최초 한번 계정생성 (dockerfile를 수정해서 하는건 너무 귀찮...)
  # docker exec -it mongo /bin/sh
  # mongo -u nhn -p nhn
  # use webflux
  # db.createUser({user: "webflux", pwd: "webflux", roles: ["readWrite"]})
  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo
    ports:
      - "3307:27017"
    volumes:
      - ./mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=nhn
      - MONGO_INITDB_ROOT_PASSWORD=nhn
      - MONGO_INITDB_DATABASE=webflux
  redis:
    container_name: redis
    hostname: redis
    image: redis
    restart: always
    ports:
      - "3308:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      
  # /bin/kafka-topics --create --topic NHN --bootstrap-server localhost:9092
  # /bin/kafka-topics --describe --topic NHN --bootstrap-server localhost:9092
  # /bin/kafka-console-producer --topic NHN --bootstrap-server localhost:9092
  # /bin/kafka-console-consumer --topic NHN --bootstrap-server localhost:9092
  # /bin/kafka-topics --delete --topic NHN --bootstrap-server localhost:9092
  kafka:
    image: confluentinc/cp-server:6.1.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
#      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

networks:
  default:
    name: webflux
#  adminer:
#    container_name: adminer # mysql web client
#    image: adminer
#    restart: always
#    ports:
#      - 8081:8080
#    environment:
#      - ADMINER_DESIGN=mvt

#  redis-commander:
#    container_name: redis-commander # redis web client
#    hostname: redis-commander
#    image: rediscommander/redis-commander:latest
#    restart: always
#    environment:
#      - REDIS_HOSTS=local:redis:6379
#    #      - REDIS_PASSWORD=webflux
#    ports:
#      - 8082:8081


#  mongo-express:
#    depends_on:
#      - mongo
#    container_name: mongo-express
#    hostname: mongo-express
#    image: mongo-express
#    environment:
#      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=webflux
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=webflux
#      - ME_CONFIG_MONGODB_PORT=27017
#      - ME_CONFIG_MONGODB_SERVER=mongo
#      - ME_CONFIG_MONGODB_AUTH_DATABASE=webflux
#    ports:
#      - 8083:8081
#  zookeeper:
#    container_name: zookeeper
#    hostname: zookeeper
#    image: wurstmeister/zookeeper
#    ports:
#      - "2181:2181"

  # -----------------------------------------------------------------------------
  # For connections _internal_ to the docker network, such as from other services
  # and components, use kafka:29092.
  #
  # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
  # -----------------------------------------------------------------------------

  # create topic
  # docker run --net=host --rm confluentinc/cp-kafka:5.0.1 kafka-topics --create --topic webflux --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181

  # producer
  # docker exec -it kafka /bin/sh
  # kafka-console-producer --broker-list localhost:9092 --topic webflux --property parse.key=true --property key.seperator=,

  # consumer
  # kafka-console-consumer --bootstrap-server localhost:9092 --topic webflux
#  kafka:
#    container_name: kafka
#    hostname: kafka
#    ports:
#      - 9092:9092
#    image: wurstmeister/kafka
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_CREATE_TOPICS: "webflux:1:1"
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#  zoonavigator:
#    container_name: zoonavigator
#    hostname: zoonavigator
#    image: elkozmon/zoonavigator:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 8084:9000
#  kafka-manager:
#    container_name: kafka-manager
#    hostname: kafka-manager
#    image: kafkamanager/kafka-manager:latest
#    depends_on:
#      - kafka
#    environment:
#      - ZK_HOSTS=zookeeper:2181
#    ports:
#      - 8085:9000